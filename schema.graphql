# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  lastName: String
  displayName: String
  email: String
  adminPassword: PasswordState
  role: UserRoleType
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupWhereUniqueInput): [Group!]
  groupsCount(where: GroupWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  dev
  admin
  user
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  lastName: StringFilter
  email: StringFilter
  adminPassword: PasswordFilter
  localAuth: UserLocalAuthWhereInput
  role: UserRoleTypeNullableFilter
  groups: GroupManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserLocalAuthWhereInput {
  AND: [UserLocalAuthWhereInput!]
  OR: [UserLocalAuthWhereInput!]
  NOT: [UserLocalAuthWhereInput!]
  id: IDFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input GroupManyRelationFilter {
  every: GroupWhereInput
  some: GroupWhereInput
  none: GroupWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  lastName: String
  email: String
  adminPassword: String
  role: UserRoleType
  groups: GroupRelateToManyForUpdateInput
  createdAt: DateTime
}

input GroupRelateToManyForUpdateInput {
  disconnect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  lastName: String
  email: String
  adminPassword: String
  role: UserRoleType
  groups: GroupRelateToManyForCreateInput
  createdAt: DateTime
}

input GroupRelateToManyForCreateInput {
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
}

type Group {
  id: ID!
  name: String
  members(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  membersCount(where: UserWhereInput! = {}): Int
}

input GroupWhereUniqueInput {
  id: ID
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IDFilter
  name: StringFilter
  members: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input GroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input GroupUpdateInput {
  name: String
  members: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input GroupUpdateArgs {
  where: GroupWhereUniqueInput!
  data: GroupUpdateInput!
}

input GroupCreateInput {
  name: String
  members: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type ChatSession {
  id: ID!
  sessionID: String
  session: String
  createdAt: DateTime
}

input ChatSessionWhereUniqueInput {
  id: ID
}

input ChatSessionWhereInput {
  AND: [ChatSessionWhereInput!]
  OR: [ChatSessionWhereInput!]
  NOT: [ChatSessionWhereInput!]
  id: IDFilter
  sessionID: StringFilter
  createdAt: DateTimeNullableFilter
}

input ChatSessionOrderByInput {
  id: OrderDirection
  sessionID: OrderDirection
  createdAt: OrderDirection
}

input ChatSessionUpdateInput {
  sessionID: String
  createdAt: DateTime
}

input ChatSessionUpdateArgs {
  where: ChatSessionWhereUniqueInput!
  data: ChatSessionUpdateInput!
}

input ChatSessionCreateInput {
  sessionID: String
  createdAt: DateTime
}

type Inquiry {
  id: ID!
  reasonOfApplication: String
  diseases: String
  medications: String
  currentLivingSituation: String
  name: String
  email: String
  phone: String
  age: Float
  yearlyIncome: Float
  gender: String
  address: String
  sessionID: String
  session: String
  aiSelected: String
  addresed: Boolean
  remarks: String
}

input InquiryWhereUniqueInput {
  id: ID
}

input InquiryWhereInput {
  AND: [InquiryWhereInput!]
  OR: [InquiryWhereInput!]
  NOT: [InquiryWhereInput!]
  id: IDFilter
  reasonOfApplication: StringFilter
  diseases: StringFilter
  medications: StringFilter
  currentLivingSituation: StringFilter
  name: StringFilter
  email: StringFilter
  phone: StringFilter
  age: FloatNullableFilter
  yearlyIncome: FloatNullableFilter
  gender: StringFilter
  address: StringFilter
  sessionID: StringFilter
  addresed: BooleanFilter
  remarks: StringFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input InquiryOrderByInput {
  id: OrderDirection
  reasonOfApplication: OrderDirection
  diseases: OrderDirection
  medications: OrderDirection
  currentLivingSituation: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  age: OrderDirection
  yearlyIncome: OrderDirection
  gender: OrderDirection
  address: OrderDirection
  sessionID: OrderDirection
  addresed: OrderDirection
  remarks: OrderDirection
}

input InquiryUpdateInput {
  reasonOfApplication: String
  diseases: String
  medications: String
  currentLivingSituation: String
  name: String
  email: String
  phone: String
  age: Float
  yearlyIncome: Float
  gender: String
  address: String
  sessionID: String
  addresed: Boolean
  remarks: String
}

input InquiryUpdateArgs {
  where: InquiryWhereUniqueInput!
  data: InquiryUpdateInput!
}

input InquiryCreateInput {
  reasonOfApplication: String
  diseases: String
  medications: String
  currentLivingSituation: String
  name: String
  email: String
  phone: String
  age: Float
  yearlyIncome: Float
  gender: String
  address: String
  sessionID: String
  addresed: Boolean
  remarks: String
}

type Policy {
  id: ID!
  sessionID: String
  name: String
  policyName: String
  policyURL: String
}

input PolicyWhereUniqueInput {
  id: ID
}

input PolicyWhereInput {
  AND: [PolicyWhereInput!]
  OR: [PolicyWhereInput!]
  NOT: [PolicyWhereInput!]
  id: IDFilter
  sessionID: StringFilter
  name: StringFilter
  policyName: StringFilter
  policyURL: StringFilter
}

input PolicyOrderByInput {
  id: OrderDirection
  sessionID: OrderDirection
  name: OrderDirection
  policyName: OrderDirection
  policyURL: OrderDirection
}

input PolicyUpdateInput {
  sessionID: String
  name: String
  policyName: String
  policyURL: String
}

input PolicyUpdateArgs {
  where: PolicyWhereUniqueInput!
  data: PolicyUpdateInput!
}

input PolicyCreateInput {
  sessionID: String
  name: String
  policyName: String
  policyURL: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createGroup(data: GroupCreateInput!): Group
  createGroups(data: [GroupCreateInput!]!): [Group]
  updateGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group
  updateGroups(data: [GroupUpdateArgs!]!): [Group]
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroups(where: [GroupWhereUniqueInput!]!): [Group]
  createChatSession(data: ChatSessionCreateInput!): ChatSession
  createChatSessions(data: [ChatSessionCreateInput!]!): [ChatSession]
  updateChatSession(where: ChatSessionWhereUniqueInput!, data: ChatSessionUpdateInput!): ChatSession
  updateChatSessions(data: [ChatSessionUpdateArgs!]!): [ChatSession]
  deleteChatSession(where: ChatSessionWhereUniqueInput!): ChatSession
  deleteChatSessions(where: [ChatSessionWhereUniqueInput!]!): [ChatSession]
  createInquiry(data: InquiryCreateInput!): Inquiry
  createInquiries(data: [InquiryCreateInput!]!): [Inquiry]
  updateInquiry(where: InquiryWhereUniqueInput!, data: InquiryUpdateInput!): Inquiry
  updateInquiries(data: [InquiryUpdateArgs!]!): [Inquiry]
  deleteInquiry(where: InquiryWhereUniqueInput!): Inquiry
  deleteInquiries(where: [InquiryWhereUniqueInput!]!): [Inquiry]
  createPolicy(data: PolicyCreateInput!): Policy
  createPolicies(data: [PolicyCreateInput!]!): [Policy]
  updatePolicy(where: PolicyWhereUniqueInput!, data: PolicyUpdateInput!): Policy
  updatePolicies(data: [PolicyUpdateArgs!]!): [Policy]
  deletePolicy(where: PolicyWhereUniqueInput!): Policy
  deletePolicies(where: [PolicyWhereUniqueInput!]!): [Policy]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, adminPassword: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  test(email: String): String
  authclient_login(email: String!, password: String!): ClientItemAuthenticationWithPasswordResult
  authclient_register(email: String!, firstName: String!, lastName: String, password: String!): Boolean
  authclient_changePassword(oldPassword: String!, newPassword: String!): Boolean
}

union ClientItemAuthenticationWithPasswordResult = ClientItemAuthenticationWithPasswordSuccess | ClientItemAuthenticationWithPasswordFailure

type ClientItemAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type ClientItemAuthenticationWithPasswordFailure {
  message: String!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  adminPassword: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupWhereUniqueInput): [Group!]
  group(where: GroupWhereUniqueInput!): Group
  groupsCount(where: GroupWhereInput! = {}): Int
  chatSessions(where: ChatSessionWhereInput! = {}, orderBy: [ChatSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChatSessionWhereUniqueInput): [ChatSession!]
  chatSession(where: ChatSessionWhereUniqueInput!): ChatSession
  chatSessionsCount(where: ChatSessionWhereInput! = {}): Int
  inquiries(where: InquiryWhereInput! = {}, orderBy: [InquiryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InquiryWhereUniqueInput): [Inquiry!]
  inquiry(where: InquiryWhereUniqueInput!): Inquiry
  inquiriesCount(where: InquiryWhereInput! = {}): Int
  policies(where: PolicyWhereInput! = {}, orderBy: [PolicyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PolicyWhereUniqueInput): [Policy!]
  policy(where: PolicyWhereUniqueInput!): Policy
  policiesCount(where: PolicyWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  test: String
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
